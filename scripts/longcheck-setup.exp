#=========================================================================
# Dejagnu Baseboard Description for cross_run_internal="no"
#=========================================================================
# If our top-level configure script sets cross_run_internal="yes" then
# we use the builtin gdb simulator and associated default mips-sim
# dejagnu target board for longcheck. If instead our top-level
# configure script sets cross_run_external="yes" then we are using an
# external isa simulator, and we use this file for longcheck.
#
# We have edited each tool's Makefile.in so that the generated
# site.exp includes the following:
#
#  if ![info exists boards_dir] { set boards_dir {} }
#  lappend boards_dir "TOP_SCRIPT_DIR"
#
# Where TOP_SCRIPT_DIR points to the scripts directory in the top of
# the cross-compiler source tree (ie. where this file is located).
# This way when we set RUNTESTFLAGS in the top-level makefile to
# "--target_board=longcheck-setup" it will load this file.
#
# The makefile will set RUNTESTFLAGS to include the following two
# variables so that this setup will work with an arbitrary cpu type:
#
#  CROSS_RUN               : external simulator to run tests on
#  CROSS_LIBGLOSS_LDFLAGS  : libgloss linker flags
#  CROSS_LIBGLOSS_CPPFLAGS : libgloss cpp flags
#
# Eventually we might want to bring dejagnu into the unified source
# tree so that we can just directly modify the appropriate files. We
# would have to make sure that the unified source tree setup correctly
# refers to the internal copy of dejagnu though.

#-------------------------------------------------------------------------
# Configure Baseboard
#-------------------------------------------------------------------------

# Load the generic configuration for this board. This will define a
# basic set of routines needed by the tool to communicate with the
# board. This will load $DEJAGNU_PREFIX/share/dejagnu/config/sim.exp
# where $DEJAGNU_PREFIX is the installation location of dejagnu.

load_generic_config "sim"

# The top-level makefile (roughly) uses 
#
#  RUNTESTFLAGS="CROSS_RUN=$(CROSS_RUN)"
#
# which means that the CROSS_RUN variable (which is set by configure)
# will be propagated down to here.

set_board_info sim $CROSS_RUN

# The compiler used to build for this board. This has nothing to do
# with what compiler is tested if we're testing gcc. This was in the
# original mips-sim.exp so we are keeping it here.

set_board_info compiler "[find_gcc]"

# Set the compiler and linker flags. The original mips-sim.exp had
# this:
#
#  set_board_info cflags  "[libgloss_include_flags] [newlib_include_flags]"
#  set_board_info ldflags "[libgloss_link_flags]    [newlib_link_flags]"
#
# The newlib/ligbloss stuff are actually function calls to the code in
# dejagnu's libgloss.exp file. These flags won't work though because
# it is hard coded to look in the libgloss/mips directory. We don't
# have this problem with newlib because the build system puts those
# machine specific headers in the build directory under
# src/maven/newlib/targ-include (and the newlib functions above know
# to add that to the search path).
#
#  RUNTESTFLAGS+="CROSS_LIBGLOSS_CPPFLAGS={cross_libgloss_cppflags} "
#  RUNTESTFLAGS+="CROSS_LIBGLOSS_LDFLAGS=$(cross_libgloss_ldflags) "
#
# which means that the CROSS_LIBGLOSS_CPPFLAGS variable and the
# CROSS_LIBGLOSS_LDFLAGS (which are set by configure) will be
# propagated down to here.

set_board_info cflags  "$CROSS_LIBGLOSS_CPPFLAGS [newlib_include_flags]"
set_board_info ldflags "$CROSS_LIBGLOSS_LDFLAGS  [newlib_link_flags]"

# Miscellaneous configuration: can't do arguments, doesn't have real
# signals, and is a simulator

set_board_info noargs 1
set_board_info gdb,nosignals 1
set_board_info is_simulator 1
